from aiogram.types.input_file import FSInputFile
from aiogram import F
from aiogram import types
from utils.plugins_biuld import BuildPlugin
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyb import admin
from time import time as unix_time 
from loader import dp, bot, cfg, scheduler
import os
import zipfile
from datetime import datetime
from data import db

#—Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞
class backupSTATE(StatesGroup):
    file=State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É


#  scheduler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–ø–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ–µ –≤—Ä–µ–º—è


#–∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –±–µ–∫–∞–ø–∞
class BuildBackup():
    def __init__(self):
        self.path=f'data/temp_bot/{unix_time()}_korgi.buckup'
        self.zipf = zipfile.ZipFile(self.path, mode='w', compression=zipfile.ZIP_STORED, allowZip64=True, compresslevel=None, strict_timestamps=True, metadata_encoding=None)
        for root, dirs, files in os.walk('data/'):
            for file in files:
                if file in ['DataBase.db', 'settings.json']:
                    self.zipf.write(os.path.join(root, file))

        for root, dirs, files in os.walk('plugins/'):
            for file in files:
                if file[-2:] == 'py' and file != 'autobackup.py':
                    self.zipf.write(os.path.join(root, file))        
        self.zipf.close()

    async def close(self):
        os.remove(self.path)

#–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∫–∞–ø–∞ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
inline_kb_list = [
    [InlineKeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∫–∞–ø", callback_data=f'upload_backup_plagin')],
    [InlineKeyboardButton(text="üóÉ –ë–µ–∫–∞–ø", callback_data=f'send_backup_plagin')]
    
    ]
#—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∫–∞–ø–∞
async def send_backup(callback):
    buckup=BuildBackup()
    document = FSInputFile(buckup.path)
    await bot.send_document(cfg.admin_id, document=document)
    await buckup.close()
    

#–æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∫–∞–ø–∞ –∫–∞–∂–¥—ã—ã–π–µ 24 —á–∞—Å–∞ –≤–æ –≤—Ä–µ–º—è –∫ –Ω—ã–Ω–µ—à–Ω–∏–º—É  +1 –º–∏–Ω—É—Ç–∞  –≤—Ä–µ–º–µ–Ω–∏
#scheduler.add_job(send_backup, trigger='cron', hour=datetime.now().hour, minute=datetime.now().minute+1, start_date=datetime.now(), kwargs={'callback' : types.CallbackQuery})

#—Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç –¥–ª—è on_startup
async def start():
    pass

Main=BuildPlugin(name='–ê–≤—Ç–æ–±—ç–∫–∞–ø(–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
    creator='K1p1k',
    on_startup=start,
    keyboard=inline_kb_list
    )

#—Å–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
#–Ω–µ –ø—É–≥–∞–π—Ç–µ—Å—å —ç—Ç–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–± @dp.message
#—ç—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤—Ç–æ—Ä—ã–π —Ä–∞–∑ —Ñ—É–Ω–∫—Ü–∏—é send_backup
dp.callback_query.register(send_backup, F.data == 'send_backup_plagin')

#—Å–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∫–∞–ø
@dp.callback_query(F.data == 'upload_backup_plagin')
async def upload_backup_plagin(call: types.CallbackQuery, state: FSMContext):
    back_main=types.InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô", callback_data=f'plagins_settings_admin_{__file__.split('/')[-1]}')]])
    await state.set_state(state=backupSTATE.file)
    msg=await call.message.edit_text('<b>‚ùóÔ∏è –í–∞–∂–Ω–æ: –±–∞–∑–∞ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è!\nüì• –û—Ç–ø—Ä–∞–≤—å backup</b>', reply_markup=back_main, parse_mode="HTML")
    await state.update_data(msg_id=msg.message_id)

#–ø—Ä–∏–Ω–∏–º–∞–µ–º –±–µ–∫–∞–ø
@dp.message(backupSTATE.file, F.content_type == types.ContentType.DOCUMENT)
async def get_file_backup(message: types.Message, state: FSMContext):
    name = message.document.file_name
    if name[-6:] != 'buckup':
        return
    PATH=f'data/temp_bot/{unix_time()}_buckup.zip'
    await bot.download(message.document.file_id, PATH)
    zipf = zipfile.ZipFile(PATH, mode='r', compression=zipfile.ZIP_STORED, allowZip64=True, compresslevel=None, strict_timestamps=True, metadata_encoding=None)
    text_enter=str()
    count=int()
    for i in zipf.filelist:
        if i.filename[:8] == 'plugins/':
            zipf.extractall(path="", members=[zipf.filelist[count]])
            text_enter+=f'–ë—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–≥–∏–Ω: {i.filename[8:]}\n'
        count+=1
    text_enter+=f'–ß—Ç–æ –±—ã –ø–ª–∞–≥–∏–Ω—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞–¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n'


    try:
        db.sql.close()
        zipf.extractall(path="", members=['data/DataBase.db', 'data/settings.json'])
        text_enter+=f'–ë–∞–∑–∞ –∑–∞–º–µ–Ω–µ–Ω–∞'
    except:
        text_enter+=f'–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –±–∞–∑—ã'
    db.sql=db.sql=db.sqlite3.connect('data//DataBase.db')
    db.cs=db.sql.cursor()
    await message.answer('<b>'+text_enter+'</b>', parse_mode="HTML")
    data=await state.update_data()
    await bot.delete_message(chat_id=cfg.admin_id, message_id=data['msg_id'])
    await message.answer(text=f'<b>ü§ñ –ü–ª–∞–≥–∏–Ω: {__file__.split('/')[-1]}\n\nüè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {Main.name}\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {Main.creator}</b>', reply_markup=await admin.get_plugin_settings(Main), parse_mode="HTML")
    await state.clear()

#—ç—Ç–æ –º—ã —Ä–∞–∑–±—Ä–∞–ª–∏ –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞–≥–∏–Ω–æ–≤

