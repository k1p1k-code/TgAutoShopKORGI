from routers import admin_router
from loader import dp, bot, cfg
from aiogram import types, F
from keyb import admin 
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json
from data import json_utils

class edit_tests(StatesGroup):
    hello=State()
    profile=State()
    helpp=State()

@admin_router.callback_query(F.data == 'settings_open')
async def switch_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    PATH='data/settings.json'
    data=json.load((open(PATH, 'r', encoding='UTF-8')))

    iswork='–†–∞–±–æ—Ç–∞–µ—Ç' if data['work'] == True else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
    await call.message.edit_text(f'<b>ü§ñ –°—Ç–∞—Ç—É—Å: {iswork}</b>', reply_markup=await admin.get_settings_menu(), parse_mode="HTML")

@admin_router.callback_query(F.data == 'onoff_bot_work_admin')
async def onoff_bot(call: types.CallbackQuery):
    PATH='data/settings.json'
    data=json.load((open(PATH, 'r', encoding='UTF-8')))
    if data['work'] == True:
        data['work']=False
    else:
        data['work']=True
    json.dump(fp=open(PATH, 'w', encoding='UTF-8'), obj=data, indent=4)
    data=json.load((open(PATH, 'r', encoding='UTF-8')))
    iswork='–†–∞–±–æ—Ç–∞–µ—Ç' if data['work'] == True else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
    await call.message.edit_text(f'<b>ü§ñ –°—Ç–∞—Ç—É—Å: {iswork}</b>', reply_markup=await admin.get_settings_menu(), parse_mode="HTML")

@admin_router.callback_query(F.data == 'bot_text_menu_admin')
async def text_menu_admin(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text='<b>‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>', reply_markup=await admin.get_texts_menu(), parse_mode="HTML")


@admin_router.callback_query(F.data == 'edit_text_hello_admin')
async def edit_text_hello_admin(call: types.CallbackQuery, state: FSMContext):
    back_main=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='üîô', callback_data='bot_text_menu_admin')]])
    await state.set_state(edit_tests.hello)
    msg=await call.message.edit_text(text='<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ–¥—Å—Ç–≤–∏–µ\nüîó –ü–æ–¥–µ—Ä–∂–∫–∞: HTML\n<code>{username}</code> - —é–∑–µ—Ä–Ω–∞–π–º\n<code>{full_name}</code> - –ø–æ–ª–Ω–æ–µ –∏–º—è\n<code>{fist_name}</code> - –∏–º—è\n<code>{id}</code> - id</b>', reply_markup=back_main, parse_mode="HTML")
    await state.update_data(msg_id=msg.message_id)

@admin_router.message(edit_tests.hello)
async def edit_hello(message: types.Message, state: FSMContext):
    await message.delete()
    await json_utils.edit_text(text='start', value=message.text)
    data=await state.update_data()
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['msg_id'], text='<b>‚úÖ–ì–æ—Ç–æ–≤–æ\n‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>', reply_markup=await admin.get_texts_menu(), parse_mode="HTML")
    await state.clear()

@admin_router.callback_query(F.data == 'edit_text_profile_admin')
async def edit_text_profile_admin(call: types.CallbackQuery, state: FSMContext):
    back_main=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='üîô', callback_data='bot_text_menu_admin')]])
    await state.set_state(edit_tests.profile)
    msg=await call.message.edit_text(text='<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è\nüîó –ü–æ–¥–µ—Ä–∂–∫–∞: HTML\n<code>{username}</code> - —é–∑–µ—Ä–Ω–∞–π–º\n<code>{full_name}</code> - –ø–æ–ª–Ω–æ–µ –∏–º—è\n<code>{fist_name}</code> - –∏–º—è\n<code>{id}</code> - id\n<code>{balance}</code> - –±–∞–ª–∞–Ω—Å\n<code>{time}</code> - –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>', reply_markup=back_main, parse_mode="HTML")
    await state.update_data(msg_id=msg.message_id)

@admin_router.message(edit_tests.profile)
async def edit_hello(message: types.Message, state: FSMContext):
    await message.delete()
    await json_utils.edit_text(text='profile', value=message.text)
    data=await state.update_data()
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['msg_id'], text='<b>‚úÖ–ì–æ—Ç–æ–≤–æ\n‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>', reply_markup=await admin.get_texts_menu(), parse_mode="HTML")
    await state.clear()

@admin_router.callback_query(F.data == 'edit_text_help_admin')
async def edit_text_hello_admin(call: types.CallbackQuery, state: FSMContext):
    back_main=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='üîô', callback_data='bot_text_menu_admin')]])
    await state.set_state(edit_tests.helpp)
    msg=await call.message.edit_text(text='<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–æ—â–∏\nüîó –ü–æ–¥–µ—Ä–∂–∫–∞: HTML\n<code>{username}</code> - —é–∑–µ—Ä–Ω–∞–π–º\n<code>{full_name}</code> - –ø–æ–ª–Ω–æ–µ –∏–º—è\n<code>{fist_name}</code> - –∏–º—è\n<code>{id}</code> - id\n<code>{creator}</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —é–∑</b>', reply_markup=back_main, parse_mode="HTML")
    await state.update_data(msg_id=msg.message_id)

@admin_router.message(edit_tests.helpp)
async def edit_hello(message: types.Message, state: FSMContext):
    await message.delete()
    await json_utils.edit_text(text='help', value=message.text)
    data=await state.update_data()
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data['msg_id'], text='<b>‚úÖ–ì–æ—Ç–æ–≤–æ\n‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>', reply_markup=await admin.get_texts_menu(), parse_mode="HTML")
    await state.clear()